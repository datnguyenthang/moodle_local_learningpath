<!-- Search & Filter -->
<div class="row">
    <div class="col-6">
        <div class="input-group input-group-sm mb-3">
            <div class="input-group-prepcatalogueEnd">
                <button class="btn btn-outline-secondary" type="button">
                    <i class="fas fa-search"></i>
                </button>
            </div>
            <input type="text" class="form-control" placeholder="{{#str}} searchcategory, local_learningpath {{/str}}" id="search-add-catalogue-course" />
        </div>
    </div>
    <div class="col-6">
        <div class="dropdown cataloguefiltermenu bg-white border input-group-sm">
            <button class="btn dropdown-toggle categoryfilter form-control d-flex align-items-center justify-content-between p-py-2 p-px-4" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="h-semibold-6" id="selected-catalogue-category">{{#str}} allcategories, local_learningpath {{/str}}</span>
            </button>
            <div class="dropdown-menu fullscreen-on-mobile category_learningpath" aria-labelledby="dropdownMenuButton">
                {{{cataloguecategoryfilterhtml}}}
            </div>
        </div>
    </div>
</div>

<!-- Course List -->
<div id="catalogue-course-list"></div>

<!-- Records Per Page Setting -->
<div class="form-group row">
    <label for="recordsPerCataloguePage" class="col-sm-8 col-form-label">{{#str}} recordperpage, local_learningpath {{/str}}</label>
    <div class="col-sm-4 input-group-sm mb-3">
      <select id="recordsPerCataloguePage" class="form-control form-select form-control-sm p-0">
        <option value="10">10</option>
        <option value="20" selected>20</option>
        <option value="50">50</option>
        <option value="100">100</option>
    </select>
    </div>
</div>

<!-- Pagination Controls -->
<div class="mt-3 d-flex justify-content-between">
    <button id="prevPageCatalogue" class="btn btn-secondary btn-sm" disabled>{{#str}} previous, local_learningpath {{/str}}</button>
    <span id="pageCatalogueInfo"></span>
    <button id="nextPageCatalogue" class="btn btn-secondary btn-sm" disabled>{{#str}} next, local_learningpath {{/str}}</button>
</div>

<script type="module">
    require(['jquery', 'core/ajax', 'core/str'], function($, ajax, str) {
        var cataloguecourses = [];
        var filteredCatalogueCourses = [];
        var currentCataloguePage = 1;
        var recordsPerCataloguePage = 20;
        var selectedCatalogueCategory = "All Categories";
        var selectedCatalogueCategoryId = 0;

        function fetchCatalogueCourses() {
            ajax.call([{
                methodname: 'local_catalogue_get_category_courses',
                args: {},
            }])[0].done(function(response) {
                if (response.courses && response.courses.length > 0) {
                    cataloguecourses = response.courses;
                    filteredCatalogueCourses = [...cataloguecourses];
                    displayCatalogueCourses();
                } else {
                    str.getString('nocatalogueavailable', 'local_learningpath').then(function(text) {
                        $('#catalogue-course-list').html('<p>' + text + '</p>');
                    });
                }
            }).fail(function(error) {
                console.error('Error fetching courses:', error);
                str.getString('errorcatalogueavailable', 'local_learningpath').then(function(text) {
                    $('#catalogue-course-list').html('<p>' + text + '</p>');
                });
            });
        }

        function displayCatalogueCourses() {
            var catalogueStart = (currentCataloguePage - 1) * recordsPerCataloguePage;
            var catalogueEnd = catalogueStart + recordsPerCataloguePage;
            var paginatedCatalogueCourses = filteredCatalogueCourses.slice(catalogueStart, catalogueEnd);
            var html = '';

            if (paginatedCatalogueCourses.length > 0) {
                html = '<ul class="list-group">';
                paginatedCatalogueCourses.forEach(course => {
                    html += `
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>${course.name}</span>
                            <button class="btn btn-primary btn-sm select-catalogue-course" data-id="${course.id}" id="select-catalogue-${course.id}"></button>
                        </li>`;
                });
                html += '</ul>';
            } else {
                str.getString('nocatalogueavailable', 'local_learningpath').then(function(text) {
                    $('#catalogue-course-list').html('<p>' + text + '</p>');
                });
                return;
            }

            $('#catalogue-course-list').html(html);

            // Update pagination info
            var totalPages = Math.ceil(filteredCatalogueCourses.length / recordsPerCataloguePage);
            $('#pageCatalogueInfo').text(`Page ${currentCataloguePage} of ${totalPages}`);

            // Enable/Disable pagination buttons
            $('#prevPageCatalogue').prop('disabled', currentCataloguePage === 1);
            $('#nextPageCatalogue').prop('disabled', currentCataloguePage >= totalPages);

            // Fetch translated button text
            str.getString('add', 'local_learningpath').then(function(text) {
                $('.select-catalogue-course').text(text);
            });

            // Add click event for select buttons
            $('.select-catalogue-course').click(function(event) {
                event.preventDefault();
                var button = $(this);
                var lpt_id = {{lpt_id}};
                var courseId = button.data('id');

                ajax.call([{
                    methodname: 'local_learningpath_add_line',
                    args: {
                        lpt_id: lpt_id,
                        catalogue_id: courseId,
                    },
                }])[0].done(function() {
                    button.closest('li').remove();
                    str.getString('addsuccess', 'local_learningpath').then(alert);
                }).fail(function() {
                    str.getString('adderror', 'local_learningpath').then(alert);
                });
            });
        }

        // Pagination controls
        $('#prevPageCatalogue').on('click', function(event) {
            event.preventDefault();
            if (currentCataloguePage > 1) {
                currentCataloguePage--;
                displayCatalogueCourses();
            }
        });

        $('#nextPageCatalogue').on('click', function(event) {
            event.preventDefault();
            if (currentCataloguePage < Math.ceil(filteredCatalogueCourses.length / recordsPerCataloguePage)) {
                currentCataloguePage++;
                displayCatalogueCourses();
            }
        });

        // Records per page change
        $('#recordsPerCataloguePage').on('change', function() {
            recordsPerCataloguePage = parseInt($(this).val(), 10);
            currentCataloguePage = 1;
            displayCatalogueCourses();
        });

        // Category filtering
        $('.category-catalogue-link').on('click', function() {
            selectedCatalogueCategory = $(this).data('category');
            selectedCatalogueCategoryId = $(this).data('cat-id');
            $('#selected-catalogue-category').text(selectedCatalogueCategory);
            filterCatalogueCourses();
        });

        // Search filtering
        $('#search-add-catalogue-course').on('keyup', function() {
            filterCatalogueCourses();
        });

        function filterCatalogueCourses() {
            var searchText = $('#search-add-catalogue-course').val().toLowerCase();

            filteredCatalogueCourses = cataloguecourses.filter(course => {
                var matchesSearch = course.name.toLowerCase().includes(searchText);
                var matchesCategory = selectedCatalogueCategory === "All Categories" || course.category_id === selectedCatalogueCategoryId;
                return matchesSearch && matchesCategory;
            });

            currentCataloguePage = 1;
            displayCatalogueCourses();
        }

        // Fetch courses on load
        fetchCatalogueCourses();
    });
</script>

