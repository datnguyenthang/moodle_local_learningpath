<!-- Search & Filter -->
<div class="row">
    <div class="col-12">
        <div class="input-group input-group-sm mb-3">
            <div class="input-group-prepend">
                <button class="btn btn-outline-secondary" type="button">
                    <i class="fas fa-search"></i>
                </button>
            </div>
            <input type="text" class="form-control" placeholder="Search modules" id="search-add-module" />
        </div>
    </div>
</div>

<!-- Course List -->
<div id="module-list"></div>

<!-- Records Per Page Setting -->
<div class="form-group row">
    <label for="recordsPerModulePage" class="col-sm-8 col-form-label">{{#str}} recordperpage, local_learningpath {{/str}}</label>
    <div class="col-sm-4 input-group-sm mb-3">
      <select id="recordsPerModulePage" class="form-control form-select form-control-sm p-0">
        <option value="10">10</option>
        <option value="20" selected>20</option>
        <option value="50">50</option>
        <option value="100">100</option>
    </select>
    </div>
</div>

<!-- Pagination Controls -->
<div class="mt-3 d-flex justify-content-between">
    <button id="prevModulePage" class="btn btn-secondary btn-sm" disabled>{{#str}} previous, local_learningpath {{/str}}</button>
    <span id="pageModuleInfo"></span>
    <button id="nextModulePage" class="btn btn-secondary btn-sm" disabled>{{#str}} next, local_learningpath {{/str}}</button>
</div>

<script type="module">
    require(['jquery', 'core/ajax', 'core/str'], function($, ajax, str) {
        var modules = [];
        var filteredModules = [];
        var currentModulePage = 1;
        var recordsPerModulePage = 20;

        function fetchModules() {
            ajax.call([{
                methodname: 'local_learningpath_core_course_get_contents',
                args: {
                    courseid: 1,
                },
            }])[0].done(function(response) {
                if (response && response.length > 0) {
                    modules = response.flatMap(section => section.modules);
                    filteredModules = [...modules];
                    displayModules();
                } else {
                    str.getString('noactivityavailable', 'local_learningpath').then(function(text) {
                        $('#module-list').html('<p>' + text + '</p>');
                    });
                }
            }).fail(function(error) {
                console.error('Error fetching modules:', error);
                str.getString('erroractivityavailable', 'local_learningpath').then(function(text) {
                    $('#module-list').html('<p>' + text + '</p>');
                });
            });
        }

        function displayModules() {
            var moduleStart = (currentModulePage - 1) * recordsPerModulePage;
            var moduleEnd = moduleStart + recordsPerModulePage;
            var paginatedModules = filteredModules.slice(moduleStart, moduleEnd);
            var html = '';

            if (paginatedModules.length > 0) {
                html = '<ul class="list-group">';
                paginatedModules.forEach(module => {
                    html += `
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>${module.name}</span>
                            <button class="btn btn-primary btn-sm select-module" data-id="${module.id}" id="select-module-${module.id}"></button>
                        </li>`;
                });
                html += '</ul>';
            } else {
                str.getString('noactivityavailable', 'local_learningpath').then(function(text) {
                    $('#module-list').html('<p>' + text + '</p>');
                });
                return;
            }

            $('#module-list').html(html);

            // Update page info
            var totalPages = Math.ceil(filteredModules.length / recordsPerModulePage);
            $('#pageModuleInfo').text(`Page ${currentModulePage} of ${totalPages}`);

            // Enable/Disable buttons
            $('#prevModulePage').prop('disabled', currentModulePage === 1);
            $('#nextModulePage').prop('disabled', currentModulePage >= totalPages);

            // Fetch translated button text
            str.getString('add', 'local_learningpath').then(function(text) {
                $('.select-module').text(text);
            });

            // Add click event for select buttons
            $('.select-module').click(function(event) {
                event.preventDefault();
                var button = $(this);
                var lpt_id = {{lpt_id}};
                var moduleId = button.data('id');

                ajax.call([{
                    methodname: 'local_learningpath_add_line',
                    args: {
                        lpt_id: lpt_id,
                        module_id: moduleId,
                    },
                }])[0].done(function() {
                    button.closest('li').remove();
                    str.getString('addsuccess', 'local_learningpath').then(alert);
                }).fail(function() {
                    str.getString('adderror', 'local_learningpath').then(alert);
                });
            });
        }

        // Pagination controls
        $('#prevModulePage').on('click', function(event) {
            event.preventDefault();
            if (currentModulePage > 1) {
                currentModulePage--;
                displayModules();
            }
        });

        $('#nextModulePage').on('click', function(event) {
            event.preventDefault();
            if (currentModulePage < Math.ceil(filteredModules.length / recordsPerModulePage)) {
                currentModulePage++;
                displayModules();
            }
        });

        // Records per page change
        $('#recordsPerModulePage').on('change', function() {
            recordsPerModulePage = parseInt($(this).val(), 10);
            currentModulePage = 1;
            displayModules();
        });

        // Search filtering
        $('#search-add-module').on('keyup', function() {
            filterModules();
        });

        function filterModules() {
            var searchText = $('#search-add-module').val().toLowerCase();

            filteredModules = modules.filter(module => {
                return module.name.toLowerCase().includes(searchText);
            });

            currentModulePage = 1;
            displayModules();
        }

        // Fetch modules on load
        fetchModules();
    });
</script>
